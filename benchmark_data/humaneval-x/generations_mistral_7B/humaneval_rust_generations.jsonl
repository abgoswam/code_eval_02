{"task_id": "Rust/0", "generation": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nbool check(vector<int> &nums, int threshold) {\n    int n = nums.size();\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (abs(nums[i] - nums[j]) <= threshold) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nint main() {\n    int n, threshold;\n    cin >> n >> threshold;\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) {\n        cin >> nums[i];\n    }\n    cout << check(nums, threshold) << endl;\n    return 0;\n}", "prompt": "\n/*\n Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \n*/\n"}
{"task_id": "Rust/1", "generation": "\nfunction separateParentheses(str) {\n    let result = [];\n    let open = 0;\n    let close = 0;\n    let start = 0;\n    let end = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '(') {\n            open++;\n        } else if (str[i] === ')') {\n            close++;\n        }\n        if (open === close) {\n            end = i;\n            result.push(str.slice(start, end + 1));\n            start = i + 1;\n            open = 0;\n            close = 0;\n        }\n    }\n    return result;\n}\n\nconsole.log(separateParentheses('((a))'));\nconsole.log(separateParentheses('((a))((b))'));\nconsole.log(separateParentheses('((a))((b))((c))'));\nconsole.log(separateParentheses('((a))((b))((c))((d))'));\nconsole.log", "prompt": "\n/*\n Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \n*/\n"}
{"task_id": "Rust/2", "generation": "\n#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint main()\n{\n    double num;\n    cin >> num;\n    cout << num - floor(num) << endl;\n    return 0;\n}", "prompt": "\n/*\n Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \n*/\n"}
{"task_id": "Rust/3", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \n*/\n"}
{"task_id": "Rust/4", "generation": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    int mean = accumulate(numbers.begin(), numbers.end(), 0) / numbers.size();\n    int mad = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        mad += abs(numbers[i] - mean);\n    }\n    mad /= numbers.size();\n    cout << \"Mean Absolute Deviation: \" << mad << endl;\n    return 0;\n}", "prompt": "\n/*\n For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \n*/\n"}
{"task_id": "Rust/5", "generation": "\nfunction insertDelimeter(numbers) {\n    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (i === 0) {\n            result.push(numbers[i]);\n        } else {\n            result.push(numbers[i], ',');\n        }\n    }\n    return result;\n}\n\nconsole.log(insertDelimeter([1, 2, 3, 4, 5]));\nconsole.log(insertDelimeter([1, 2, 3, 4, 5, 6]));", "prompt": "\n/*\n Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \n*/\n"}
{"task_id": "Rust/6", "generation": "\n#include <iostream>\n#include <string>\n#include <stack>\n\nusing namespace std;\n\nint main()\n{\n    string s;\n    cin >> s;\n    stack<int> st;\n    int max = 0;\n    for (int i = 0; i < s.length(); i++)\n    {\n        if (s[i] == '(')\n        {\n            st.push(i);\n        }\n        else if (s[i] == ')')\n        {\n            st.pop();\n            if (st.empty())\n            {\n                max = max > i - 1 ? max : i - 1;\n            }\n            else\n            {\n                max = max > i - st.top() ? max : i - st.top();\n            }\n        }\n    }\n    cout << max << endl;\n    return 0;\n}", "prompt": "\n/*\n Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    \n*/\n"}
{"task_id": "Rust/7", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n Filter an input list of strings only for ones that contain given substring\n    \n*/\n"}
{"task_id": "Rust/8", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \n*/\n"}
{"task_id": "Rust/9", "generation": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main()\n{\n    vector<int> v = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    vector<int> v2;\n    for (int i = 0; i < v.size(); i++)\n    {\n        v2.push_back(v[i]);\n    }\n    for (int i = 0; i < v.size(); i++)\n    {\n        v2[i] = max(v2[i], v2[i - 1]);\n    }\n    for (int i = 0; i < v.size(); i++)\n    {\n        cout << v2[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}", "prompt": "\n/*\n From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \n*/\n"}
{"task_id": "Rust/10", "generation": "\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <cctype>\n\nusing namespace std;\n\nstring shortestPalindrome(string s) {\n    string rev = s;\n    reverse(rev.begin(), rev.end());\n    string res = \"\";\n    int i = 0;\n    while (i < s.size() && s[i] == rev[i]) {\n        i++;\n    }\n    res = rev.substr(0, i);\n    reverse(res.begin(), res.end());\n    return res + s;\n}\n\nint main() {\n    string s = \"abcd\";\n    cout << shortestPalindrome(s) << endl;\n    return 0;\n}", "prompt": "\n/*\n Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \n*/\n"}
{"task_id": "Rust/11", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \n*/\n"}
{"task_id": "Rust/12", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \n*/\n"}
{"task_id": "Rust/13", "generation": "\n#include <iostream>\n\nusing namespace std;\n\nint gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    }\n    return gcd(b, a % b);\n}\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n    cout << gcd(a, b) << endl;\n    return 0;\n}", "prompt": "\n/*\n Return a greatest common divisor of two integers a and b\n    \n*/\n"}
{"task_id": "Rust/14", "generation": "\n#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nvector<string> getPrefixes(string s) {\n    vector<string> prefixes;\n    for (int i = 0; i < s.length(); i++) {\n        prefixes.push_back(s.substr(0, i + 1));\n    }\n    return prefixes;\n}\n\nint main() {\n    string s;\n    cin >> s;\n    vector<string> prefixes = getPrefixes(s);\n    for (string prefix : prefixes) {\n        cout << prefix << \" \";\n    }\n    cout << endl;\n    return 0;\n}", "prompt": "\n/*\n Return list of all prefixes from shortest to longest of the input string\n    \n*/\n"}
{"task_id": "Rust/15", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    \n*/\n"}
{"task_id": "Rust/16", "generation": "\n#include <iostream>\n#include <string>\n#include <unordered_map>\n\nusing namespace std;\n\nint main()\n{\n    string str;\n    cin >> str;\n\n    unordered_map<char, int> map;\n\n    for (int i = 0; i < str.length(); i++)\n    {\n        if (map.find(str[i]) == map.end())\n        {\n            map[str[i]] = 1;\n        }\n        else\n        {\n            map[str[i]]++;\n        }\n    }\n\n    cout << map.size() << endl;\n\n    return 0;\n}", "prompt": "\n/*\n Given a string, find out how many distinct characters (regardless of case) does it consist of\n    \n*/\n"}
{"task_id": "Rust/17", "generation": "\nfunction parseNotes(notes) {\n    let arr = notes.split('|');\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === 'o') {\n            result.push(4);\n        } else if (arr[i] === 'o|') {\n            result.push(2);\n        } else if (arr[i] === '.|') {\n            result.push(1);\n        }\n    }\n    return result;\n}\n\nconsole.log(parseNotes('o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|", "prompt": "\n/*\n Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n    \n*/\n"}
{"task_id": "Rust/18", "generation": "\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <cstdlib>\n#include <cstdio>\n#include <cstring>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <cctype>\n#include <iomanip>\n#include <sstream>\n#include <fstream>\n#include <bitset>\n#include <assert.h>\n#include <ctime>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <limits>\n#include <complex>\n#include <iterator>\n#include <list>\n#include <regex>\n#include <array>\n#include <unordered_map>\n#include <unordered_set>\n#include <climits>\n#include <cfloat>\n#include <cstdarg>\n#include <cstddef>\n#include <cstdlib>\n#include <cstring>\n#include <c", "prompt": "\n/*\n Find how many times a given substring can be found in the original string. Count overlaping cases.\n    \n*/\n"}
{"task_id": "Rust/19", "generation": "\nfunction sortNumbers(input) {\n    let arr = input.split(' ');\n    let sorted = arr.sort((a, b) => {\n        return a - b;\n    });\n    return sorted.join(' ');\n}\n\nconsole.log(sortNumbers('one two three four five six seven eight nine zero'));", "prompt": "\n/*\n Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \n*/\n"}
{"task_id": "Rust/20", "generation": "\nfunction closestPair(numbers) {\n    let closest = [];\n    let min = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let diff = Math.abs(numbers[i] - numbers[j]);\n            if (diff < min) {\n                min = diff;\n                closest = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return closest;\n}\n\nconsole.log(closestPair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));", "prompt": "\n/*\n From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \n*/\n"}
{"task_id": "Rust/21", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \n*/\n"}
{"task_id": "Rust/22", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n Filter given list of any python values only for integers\n    \n*/\n"}
{"task_id": "Rust/23", "generation": "\n#include <stdio.h>\n#include <string.h>\n\nint main()\n{\n    char str[100];\n    int i, len;\n\n    printf(\"Enter a string: \");\n    gets(str);\n\n    len = strlen(str);\n\n    printf(\"Length of string is %d\", len);\n\n    return 0;\n}", "prompt": "\n/*\n Return length of given string\n    \n*/\n"}
{"task_id": "Rust/24", "generation": "\n#include <iostream>\nusing namespace std;\n\nint main()\n{\n    int n;\n    cin >> n;\n    int i = 2;\n    while (n % i != 0)\n    {\n        i++;\n    }\n    cout << i << endl;\n    return 0;\n}", "prompt": "\n/*\n For a given number n, find the largest number that divides n evenly, smaller than n\n    \n*/\n"}
{"task_id": "Rust/25", "generation": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\nvector<int> primeFactors(int n) {\n    vector<int> factors;\n    int i = 2;\n    while (n > 1) {\n        if (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n\nint main() {\n    int n;\n    cin >> n;\n    vector<int> factors = primeFactors(n);\n    for (int i = 0; i < factors.size(); i++) {\n        cout << factors[i] << \" \";\n    }\n    return 0;\n}", "prompt": "\n/*\n Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \n*/\n"}
{"task_id": "Rust/26", "generation": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main()\n{\n    vector<int> v = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, ", "prompt": "\n/*\n From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \n*/\n"}
{"task_id": "Rust/27", "generation": "\n#include <iostream>\n#include <string>\nusing namespace std;\n\nint main()\n{\n    string str;\n    cin >> str;\n    for (int i = 0; i < str.length(); i++)\n    {\n        if (str[i] >= 'a' && str[i] <= 'z')\n        {\n            str[i] = str[i] - 32;\n        }\n        else if (str[i] >= 'A' && str[i] <= 'Z')\n        {\n            str[i] = str[i] + 32;\n        }\n    }\n    cout << str;\n    return 0;\n}", "prompt": "\n/*\n For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    \n*/\n"}
{"task_id": "Rust/28", "generation": "\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_STRINGS 10\n\nint main(void)\n{\n    char strings[MAX_STRINGS][80];\n    char *concatenated_string;\n    int num_strings;\n    int i;\n\n    printf(\"Enter up to %d strings (up to 80 characters each):\\n\", MAX_STRINGS);\n\n    for (i = 0; i < MAX_STRINGS; i++)\n    {\n        printf(\"String %d: \", i + 1);\n        fgets(strings[i], 80, stdin);\n    }\n\n    num_strings = i;\n\n    concatenated_string = malloc(sizeof(char) * (strlen(strings[0]) + 1));\n\n    for (i = 0; i < num_strings; i++)\n    {\n        strcat(concatenated_string, strings[i]);\n    }\n\n    printf(\"Concatenated string: %s\\n\",", "prompt": "\n/*\n Concatenate list of strings into a single string\n    \n*/\n"}
{"task_id": "Rust/29", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n Filter an input list of strings only for ones that start with a given prefix.\n    \n*/\n"}
{"task_id": "Rust/30", "generation": "\nfunction positiveSum(arr) {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\npositiveSum([1, 2, 3, 4, 5, -6, -7, -8, -9, 0]);", "prompt": "\n/*\nReturn only positive numbers in the list.\n    \n*/\n"}
{"task_id": "Rust/31", "generation": "\nfunction isPrime(num) {\n    if (num < 2) {\n        return false;\n    }\n    for (let i = 2; i < num; i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(isPrime(1));\nconsole.log(isPrime(2));\nconsole.log(isPrime(3));\nconsole.log(isPrime(4));\nconsole.log(isPrime(5));\nconsole.log(isPrime(6));\nconsole.log(isPrime(7));\nconsole.log(isPrime(8));\nconsole.log(isPrime(9));\nconsole.log(isPrime(10));\nconsole.log(isPrime(11));\nconsole.log(isPrime(12));\nconsole.log(isPrime(13));\nconsole.log(isPrime(14));\nconsole.log(isPrime(15));\nconsole.log(isPrime(1", "prompt": "\n/*\nReturn true if a given number is prime, and false otherwise.\n    \n*/\n"}
{"task_id": "Rust/32", "generation": "\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\ndouble find_zero(double xs[], int n) {\n    double x = 0;\n    double a = xs[n-1];\n    double b = xs[n-2];\n    double c = xs[n-3];\n    double d = xs[n-4];\n    double e = xs[n-5];\n    double f = xs[n-6];\n    double g = xs[n-7];\n    double h = xs[n-8];\n    double i = xs[n-9];\n    double j = xs[n-10];\n    double k = xs[n-11];\n    double l = xs[n-12];\n    double m = xs[n-13];\n    double n = xs[n-14];\n    double o = xs[n-15];\n    double p = xs[n-16];\n    double q = xs[", "prompt": "\n/*\n xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \n*/\n"}
{"task_id": "Rust/33", "generation": "\ndef sort_by_thirds(l):\n    l_prime = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime.append(sorted(l[i:i+3]))\n        else:\n            l_prime.append(l[i])\n    return l_prime\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\nThis function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \n*/\n"}
{"task_id": "Rust/34", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\nReturn sorted unique elements in a list\n    \n*/\n"}
{"task_id": "Rust/35", "generation": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main()\n{\n    vector<int> v = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    int max = *max_element(v.begin(), v.end());\n    cout << \"Maximum element in the list is: \" << max << endl;\n\n    return 0;\n}", "prompt": "\n/*\nReturn maximum element in the list.\n    \n*/\n"}
{"task_id": "Rust/36", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \n*/\n"}
{"task_id": "Rust/37", "generation": "\ndef sort_even(l):\n    l' = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l'.append(sorted(l[i]))\n        else:\n            l'.append(l[i])\n    return l'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\nThis function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \n*/\n"}
{"task_id": "Rust/38", "generation": "\nfunction decode_cyclic(str) {\n    var decoded = \"\";\n    var i = 0;\n    while (i < str.length) {\n        var char = str[i];\n        if (char === \"(\") {\n            i++;\n            var num = \"\";\n            while (str[i] !== \")\") {\n                num += str[i];\n                i++;\n            }\n            i++;\n            var num_int = parseInt(num);\n            var j = 0;\n            while (j < num_int) {\n                decoded += str[i];\n                i++;\n                j++;\n            }\n        } else {\n            decoded += char;\n            i++;\n        }\n    }\n    return decoded;\n}\n\n/*\n\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \n*/\n\nfunction decode_cyclic_2(str) {\n    var decoded = \"\";\n    var i = 0;\n    while (i < str.length) {\n        var char = str[i];", "prompt": "\n/*\n\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \n*/\n"}
{"task_id": "Rust/39", "generation": "\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\nint is_prime(int n)\n{\n    int i;\n    for (i = 2; i <= sqrt(n); i++)\n    {\n        if (n % i == 0)\n        {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint fib(int n)\n{\n    if (n == 0)\n    {\n        return 0;\n    }\n    if (n == 1)\n    {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nint main()\n{\n    int n;\n    scanf(\"%d\", &n);\n    int i;\n    for (i = 0; i < n; i++)\n    {\n        if (is_prime(fib(i)))\n        {\n            printf(\"%d\\n\", fib(i));\n        }\n    }\n    return 0;\n", "prompt": "\n/*\n\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \n*/\n"}
{"task_id": "Rust/40", "generation": "\ndef triples_sum_to_zero(nums):\n    # Write your code here.\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == 0:\n                    return True\n    return False\n\n\n# Test cases\nnums = [-1, 0, 1, 2, -1, -4]\nprint(triples_sum_to_zero(nums))  # Output: True\n\nnums = [0, 0, 0]\nprint(triples_sum_to_zero(nums))  # Output: True\n\nnums = [1, 2, 3]\nprint(triples_sum_to_zero(nums))  # Output: False\n\nnums = [1, 2, 3, 4]\nprint(triples_sum_to_zero(nums))  # Output: False", "prompt": "\n/*\n\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \n*/\n"}
{"task_id": "Rust/41", "generation": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main()\n{\n    int n;\n    cin >> n;\n    vector<int> left(n);\n    vector<int> right(n);\n    for (int i = 0; i < n; i++)\n    {\n        cin >> left[i];\n    }\n    for (int i = 0; i < n; i++)\n    {\n        cin >> right[i];\n    }\n    sort(left.begin(), left.end());\n    sort(right.begin(), right.end());\n    int count = 0;\n    for (int i = 0; i < n; i++)\n    {\n        if (left[i] > right[i])\n        {\n            count++;\n        }\n    }\n    cout << count << endl;\n    return 0;\n}", "prompt": "\n/*\n\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \n*/\n"}
{"task_id": "Rust/42", "generation": "\nfunction increment(list) {\n    let newList = [];\n    for (let i = 0; i < list.length; i++) {\n        newList.push(list[i] + 1);\n    }\n    return newList;\n}\n\nconsole.log(increment([1, 2, 3, 4, 5]));\nconsole.log(increment([1, 2, 3, 4, 5, 6]));\nconsole.log(increment([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(increment([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(increment([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(increment([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));", "prompt": "\n/*\nReturn list with elements incremented by 1.\n    \n*/\n"}
{"task_id": "Rust/43", "generation": "\ndef pairs_sum_to_zero(nums):\n    # Write your code here.\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == 0:\n                return True\n    return False\n\n\n# Test cases\nnums = [-1, 0, 1, 2, -1, -4]\nprint(pairs_sum_to_zero(nums))  # Output: True\n\nnums = [1, 2, 3, 4, 5]\nprint(pairs_sum_to_zero(nums))  # Output: False\n\nnums = [0, 0]\nprint(pairs_sum_to_zero(nums))  # Output: True\n\nnums = [1, 2, 3, 4, 5, 6]\nprint(pairs_sum_to_zero(nums))  # Output: False", "prompt": "\n/*\n\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \n*/\n"}
{"task_id": "Rust/44", "generation": "\n#include <iostream>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\nstring convert(int x, int base) {\n    string result = \"\";\n    while (x > 0) {\n        int digit = x % base;\n        if (digit < 10) {\n            result = char(digit + '0') + result;\n        } else {\n            result = char(digit - 10 + 'A') + result;\n        }\n        x /= base;\n    }\n    return result;\n}\n\nint main() {\n    int x, base;\n    cin >> x >> base;\n    cout << convert(x, base) << endl;\n    return 0;\n}", "prompt": "\n/*\nChange numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \n*/\n"}
{"task_id": "Rust/45", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    \n*/\n"}
{"task_id": "Rust/46", "generation": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint fib4(int n) {\n    vector<int> fib4(n+1);\n    fib4[0] = 0;\n    fib4[1] = 0;\n    fib4[2] = 2;\n    fib4[3] = 0;\n    for (int i = 4; i <= n; i++) {\n        fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n    }\n    return fib4[n];\n}\n\nint main() {\n    int n;\n    cin >> n;\n    cout << fib4(n) << endl;\n    return 0;\n}", "prompt": "\n/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    \n*/\n"}
{"task_id": "Rust/47", "generation": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    vector<int> l(n);\n    for (int i = 0; i < n; i++) {\n        cin >> l[i];\n    }\n    sort(l.begin(), l.end());\n    int median = 0;\n    if (n % 2 == 0) {\n        median = (l[n / 2] + l[(n / 2) - 1]) / 2;\n    } else {\n        median = l[n / 2];\n    }\n    cout << median << endl;\n    return 0;\n}", "prompt": "\n/*\nReturn median of elements in the list l.\n    \n*/\n"}
{"task_id": "Rust/48", "generation": "\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\nbool isPalindrome(string s)\n{\n    int i = 0;\n    int j = s.length() - 1;\n\n    while (i < j)\n    {\n        if (s[i] != s[j])\n        {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n\nint main()\n{\n    string s;\n    cout << \"Enter a string: \";\n    cin >> s;\n\n    if (isPalindrome(s))\n    {\n        cout << \"The string is a palindrome.\" << endl;\n    }\n    else\n    {\n        cout << \"The string is not a palindrome.\" << endl;\n    }\n\n    return 0;\n}", "prompt": "\n/*\n\n    Checks if given string is a palindrome\n    \n*/\n"}
{"task_id": "Rust/49", "generation": "\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll long long\n#define ld long double\n#define pb push_back\n#define mp make_pair\n#define vll vector<ll>\n#define vvll vector<vector<ll>>\n#define vstr vector<string>\n#define vpll vector<pair<ll,ll>>\n#define vpii vector<pair<int,int>>\n#define vb vector<bool>\n#define vvi vector<vector<int>>\n#define vvvi vector<vector<vector<int>>>\n#define vvpii vector<vector<pair<int,int>>>\n#define vvpll vector<vector<pair<ll,ll>>>\n#define vvstr vector<vector<string>>\n#define vvvb vector<vector<bool>>\n#define vvvll vector<vector<vector<ll>>>\n#define vvplll vector<vector<pair<ll,ll>>>\n#define vvpllll vector<vector<pair<ll,ll>>>\n#define vvplllll vector<vector", "prompt": "\n/*\nReturn 2^n modulo p (be aware of numerics).\n    \n*/\n"}
{"task_id": "Rust/50", "generation": "\nfunction decode_shift(str) {\n    let decoded = \"\";\n    for (let i = 0; i < str.length; i++) {\n        let char = str[i];\n        let ascii = char.charCodeAt(0);\n        let new_ascii = ascii - 13;\n        if (new_ascii < 65) {\n            new_ascii = new_ascii + 26;\n        }\n        decoded += String.fromCharCode(new_ascii);\n    }\n    return decoded;\n}\n\nconsole.log(decode_shift(\"ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZ", "prompt": "\n/*\n\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \n*/\n"}
{"task_id": "Rust/51", "generation": "\nfunction remove_vowels(str) {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let newStr = '';\n    for (let i = 0; i < str.length; i++) {\n        if (!vowels.includes(str[i])) {\n            newStr += str[i];\n        }\n    }\n    return newStr;\n}\n\nconsole.log(remove_vowels('hello'));\nconsole.log(remove_vowels('apple'));\nconsole.log(remove_vowels('banana'));\nconsole.log(remove_vowels('orange'));\nconsole.log(remove_vowels('grape'));\nconsole.log(remove_vowels('watermelon'));\nconsole.log(remove_vowels('pineapple'));\nconsole.log(remove_vowels('strawberry'));\nconsole.log(remove_vowels('kiwi'));\nconsole.log(remove_vowels('cherry'));\nconsole.log(remove_vowels('blueberry'));\nconsole.", "prompt": "\n/*\n\n    remove_vowels is a function that takes string and returns string without vowels.\n    \n*/\n"}
{"task_id": "Rust/52", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\nReturn True if all numbers in the list l are below threshold t.\n    \n*/\n"}
{"task_id": "Rust/53", "generation": "\n#include <stdio.h>\n\nint main()\n{\n    int x, y, sum;\n\n    printf(\"Enter two numbers: \");\n    scanf(\"%d %d\", &x, &y);\n\n    sum = x + y;\n\n    printf(\"Sum of %d and %d is %d\\n\", x, y, sum);\n\n    return 0;\n}", "prompt": "\n/*\nAdd two numbers x and y\n*/\n"}
{"task_id": "Rust/54", "generation": "\n#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main()\n{\n    string word1, word2;\n    cin >> word1 >> word2;\n\n    int count1 = 0, count2 = 0;\n\n    for (int i = 0; i < word1.length(); i++)\n    {\n        if (word1[i] == word2[i])\n        {\n            count1++;\n        }\n    }\n\n    for (int i = 0; i < word2.length(); i++)\n    {\n        if (word1[i] == word2[i])\n        {\n            count2++;\n        }\n    }\n\n    if (count1 == word1.length() && count2 == word2.length())\n    {\n        cout << \"YES\";\n    }\n    else\n    {\n        cout << \"NO\";\n    }\n\n    return 0;\n}", "prompt": "\n/*\n\n    Check if two words have the same characters.\n    \n*/\n"}
{"task_id": "Rust/55", "generation": "\n#include <iostream>\nusing namespace std;\n\nint fib(int n)\n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    return fib(n - 1) + fib(n - 2);\n}\n\nint main()\n{\n    int n;\n    cin >> n;\n    cout << fib(n);\n    return 0;\n}", "prompt": "\n/*\nReturn n-th Fibonacci number.\n    \n*/\n"}
{"task_id": "Rust/56", "generation": "\nfunction isBalanced(brackets) {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"(\") {\n            stack.push(\")\");\n        } else if (brackets[i] === \"{\") {\n            stack.push(\"}\");\n        } else if (brackets[i] === \"[\") {\n            stack.push(\"]\");\n        } else if (brackets[i] === \")\" || brackets[i] === \"}\" || brackets[i] === \"]\") {\n            if (stack.pop() !== brackets[i]) {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(isBalanced(\"()\"));\nconsole.log(isBalanced(\"()[]{}\"));\nconsole.log(isBalanced(\"(]\"));\nconsole.log(isBalanced(\"([)]\"));\nconsole.log(isBalanced(\"{[]}\"));", "prompt": "\n/*\n brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n*/\n"}
{"task_id": "Rust/57", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\nReturn True is list elements are monotonically increasing or decreasing.\n    \n*/\n"}
{"task_id": "Rust/58", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\nReturn sorted unique common elements for two lists.\n    \n*/\n"}
{"task_id": "Rust/59", "generation": "\nfunction largestPrimeFactor(n) {\n    let largest = 0;\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            if (isPrime(i)) {\n                largest = i;\n            }\n        }\n    }\n    return largest;\n}\n\nfunction isPrime(n) {\n    for (let i = 2; i <= n / 2; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(largestPrimeFactor(10));", "prompt": "\n/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n    \n*/\n"}
{"task_id": "Rust/60", "generation": "\nfunction sum_to_n(n) {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\nconsole.log(sum_to_n(5)); // Output: 15\nconsole.log(sum_to_n(10)); // Output: 55\nconsole.log(sum_to_n(20)); // Output: 210\n\n\n/*\nsum_to_n_recursive is a function that sums numbers from 1 to n using recursion.\n    \n*/\n\nfunction sum_to_n_recursive(n) {\n    if (n === 1) {\n        return 1;\n    } else {\n        return n + sum_to_n_recursive(n - 1);\n    }\n}\n\nconsole.log(sum_to_n_recursive(5)); // Output: 15\nconsole.log(sum_to_n_recursive(10)); // Output: 5", "prompt": "\n/*\nsum_to_n is a function that sums numbers from 1 to n.\n    \n*/\n"}
{"task_id": "Rust/61", "generation": "\nfunction isBalanced(brackets) {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"(\") {\n            stack.push(brackets[i]);\n        } else if (brackets[i] === \")\") {\n            if (stack.length === 0) {\n                return false;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(isBalanced(\"()\"));\nconsole.log(isBalanced(\"()()\"));\nconsole.log(isBalanced(\"(())\"));\nconsole.log(isBalanced(\"(()())\"));\nconsole.log(isBalanced(\"()()()\"));\nconsole.log(isBalanced(\"()(())\"));\nconsole.log(isBalanced(\"(()()())\"));\nconsole.log(isBalanced(\"()(())()\"));\nconsole.log(isBalanced(\"()(())()()\"));\nconsole.log(isBalanced", "prompt": "\n/*\n brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n*/\n"}
{"task_id": "Rust/62", "generation": "\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> derivative(vector<int> xs) {\n    vector<int> result;\n    for (int i = 0; i < xs.size(); i++) {\n        result.push_back(xs[i] * (i + 1));\n    }\n    return result;\n}\n\nint main() {\n    vector<int> xs = {1, 2, 3, 4};\n    vector<int> result = derivative(xs);\n    for (int i = 0; i < result.size(); i++) {\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}", "prompt": "\n/*\n xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    \n*/\n"}
{"task_id": "Rust/63", "generation": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint fibfib(int n) {\n    if (n == 0 || n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\nint main() {\n    int n;\n    cin >> n;\n    cout << fibfib(n) << endl;\n    return 0;\n}", "prompt": "\n/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    \n*/\n"}
{"task_id": "Rust/64", "generation": "\nfunction vowels_count(word) {\n    let vowels = 0;\n    for (let i = 0; i < word.length; i++) {\n        if (word[i] === 'a' || word[i] === 'e' || word[i] === 'i' || word[i] === 'o' || word[i] === 'u' || word[i] === 'y') {\n            vowels++;\n        }\n    }\n    return vowels;\n}\n\nconsole.log(vowels_count('hello'));\nconsole.log(vowels_count('yellow'));\nconsole.log(vowels_count('y'));\nconsole.log(vowels_count('yellow'));\nconsole.log(vowels_count('yellow'));\nconsole.log(vowels_count('yellow'));\nconsole.log(vowels_count('yellow'));\nconsole.log(vowels_count('yellow'));\nconsole.log(vowels_count('yellow'));\nconsole.log(vowels_count('y", "prompt": "\n/*\nWrite a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    \n*/\n"}
{"task_id": "Rust/65", "generation": "\nfunction circularShift(x, shift) {\n    let str = x.toString();\n    let arr = str.split('');\n    let newArr = [];\n    let newStr = '';\n    let shiftNum = shift % arr.length;\n    if (shiftNum === 0) {\n        return str;\n    }\n    for (let i = 0; i < shiftNum; i++) {\n        newArr.push(arr.pop());\n    }\n    newArr.push(...arr);\n    for (let i = 0; i < newArr.length; i++) {\n        newStr += newArr[i];\n    }\n    return newStr;\n}\n\nconsole.log(circularShift(12345, 2));", "prompt": "\n/*\nCircular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \n*/\n"}
{"task_id": "Rust/66", "generation": "\nfunction getSum(s) {\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            sum += s[i].charCodeAt(0);\n        }\n    }\n    return sum;\n}\n\nconsole.log(getSum('abCdEfGhIjKlMnOpQrStUvWxYz'));", "prompt": "\n/*\nTask\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n    \n*/\n"}
{"task_id": "Rust/67", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \n*/\n"}
{"task_id": "Rust/68", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \n*/\n"}
{"task_id": "Rust/69", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    \n*/\n"}
{"task_id": "Rust/70", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n    \n*/\n"}
{"task_id": "Rust/71", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    \n*/\n"}
{"task_id": "Rust/72", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    \n*/\n"}
{"task_id": "Rust/73", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n    \n*/\n"}
{"task_id": "Rust/74", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n    \n*/\n"}
{"task_id": "Rust/75", "generation": "\nfunction isMultiplicationOfThreePrimes(a) {\n    let isPrime = true;\n    let primeNumbers = [];\n    let multiplication = 1;\n    for (let i = 2; i < a; i++) {\n        if (a % i === 0) {\n            isPrime = false;\n            break;\n        }\n    }\n    if (isPrime) {\n        primeNumbers.push(a);\n        multiplication = a;\n    }\n    for (let i = 2; i < a; i++) {\n        if (a % i === 0) {\n            isPrime = false;\n            break;\n        }\n    }\n    if (isPrime) {\n        primeNumbers.push(a);\n        multiplication = a;\n    }\n    for (let i = 2; i < a; i++) {\n        if (a % i === 0) {\n            isPrime = false;\n            break;\n        }\n    }\n    if (isPrime) {\n        primeNumbers.push(a", "prompt": "\n/*\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    \n*/\n"}
{"task_id": "Rust/76", "generation": "\nfunction isSimplePower(x, n) {\n    let result = false;\n    for (let i = 0; i < x; i++) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\nconsole.log(isSimplePower(16, 2));\nconsole.log(isSimplePower(16, 4));\nconsole.log(isSimplePower(16, 3));\nconsole.log(isSimplePower(16, 5));\nconsole.log(isSimplePower(16, 6));\nconsole.log(isSimplePower(16, 7));\nconsole.log(isSimplePower(16, 8));\nconsole.log(isSimplePower(16, 9));\nconsole.log(isSimplePower(16, 10));\nconsole.log(isSimplePower(16, 11));\nconsole.log(isSimplePower(16, 12));\nconsole.log(isSimplePower(16, ", "prompt": "\n/*\nYour task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    \n*/\n"}
{"task_id": "Rust/77", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    \n*/\n"}
{"task_id": "Rust/78", "generation": "\nfunction hexPrimes(hex) {\n    let hexPrime = 0;\n    let hexDigits = hex.split('');\n    for (let i = 0; i < hexDigits.length; i++) {\n        if (hexDigits[i] === '2' || hexDigits[i] === '3' || hexDigits[i] === '5' || hexDigits[i] === '7' || hexDigits[i] === 'B' || hexDigits[i] === 'D') {\n            hexPrime++;\n        }\n    }\n    return hexPrime;\n}\n\nconsole.log(hexPrimes('')); // 0\nconsole.log(hexPrimes('1')); // 0\nconsole.log(hexPrimes('2')); // 1\nconsole.log(hexPrimes('3')); // 1\nconsole.log(hexPrimes('4')); // 0\nconsole.log(hexPrimes('5')); // 1\nconsole.log(hexPrimes('6')); // 0\nconsole.log(hexPrimes('7')); // 1\n", "prompt": "\n/*\nYou have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    \n*/\n"}
{"task_id": "Rust/79", "generation": "\nfunction binary(num) {\n    let binary = num.toString(2);\n    let db = 'db';\n    return db + binary + db;\n}\n\nconsole.log(binary(10));", "prompt": "\n/*\nYou will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n    \n*/\n"}
{"task_id": "Rust/80", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    \n*/\n"}
{"task_id": "Rust/81", "generation": "\nfunction grade(gpa) {\n    if (gpa >= 4.0) {\n        return \"A+\"\n    } else if (gpa >= 3.7) {\n        return \"A\"\n    } else if (gpa >= 3.3) {\n        return \"A-\"\n    } else if (gpa >= 3.0) {\n        return \"B+\"\n    } else if (gpa >= 2.7) {\n        return \"B\"\n    } else if (gpa >= 2.3) {\n        return \"B-\"\n    } else if (gpa >= 2.0) {\n        return \"C+\"\n    } else if (gpa >= 1.7) {\n        return \"C\"\n    } else if (gpa >= 1.3) {\n        return \"C-\"\n    } else if (gpa >= 1.0) {\n        return \"D+\"\n    } else if (gpa >= 0.7) {\n        return \"D\"\n    } else if (gpa >= 0.0) {\n", "prompt": "\n/*\nIt is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n*/\n"}
{"task_id": "Rust/82", "generation": "\nfunction isPrime(str) {\n    let strLength = str.length;\n    let isPrime = true;\n    for (let i = 2; i < strLength; i++) {\n        if (strLength % i === 0) {\n            isPrime = false;\n            break;\n        }\n    }\n    return isPrime;\n}\n\nconsole.log(isPrime(\"hello\"));\nconsole.log(isPrime(\"world\"));\nconsole.log(isPrime(\"hello world\"));\nconsole.log(isPrime(\"hello world!\"));\nconsole.log(isPrime(\"hello world!!\"));\nconsole.log(isPrime(\"hello world!!!!\"));\nconsole.log(isPrime(\"hello world!!!!\"));\nconsole.log(isPrime(\"hello world!!!!!\"));\nconsole.log(isPrime(\"hello world!!!!!!!\"));\nconsole.log(isPrime(\"hello world!!!!!!!!\"));\nconsole.log(isPrime(\"hello world!!!!!!!!!\"));\nconsole.log(isPrime(\"hello world!!!!!!!!!!!\"));\nconsole.log(isPr", "prompt": "\n/*\nWrite a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    \n*/\n"}
{"task_id": "Rust/83", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \n*/\n"}
{"task_id": "Rust/84", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\nGiven a positive integer N, return the total sum of its digits in binary.\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \n*/\n"}
{"task_id": "Rust/85", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n    \n*/\n"}
{"task_id": "Rust/86", "generation": "\nfunction orderedString(str) {\n    let arr = str.split(' ');\n    let newArr = [];\n    for (let i = 0; i < arr.length; i++) {\n        let temp = arr[i].split('');\n        temp.sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0));\n        newArr.push(temp.join(''));\n    }\n    return newArr.join(' ');\n}\n\nconsole.log(orderedString('This is a test'));\nconsole.log(orderedString('This is a test'));\nconsole.log(orderedString('This is a test'));\nconsole.log(orderedString('This is a test'));\nconsole.log(orderedString('This is a test'));\nconsole.log(orderedString('This is a test'));\nconsole.log(orderedString('This is a test'));\nconsole.log(orderedString('This is a test'));\nconsole.log(orderedString('This is a test'));\nconsole.log(orderedString('This is a test'));\nconsole.log(orderedString('This is a test'));", "prompt": "\n/*\n\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n    \n*/\n"}
{"task_id": "Rust/87", "generation": "\n\ndef find_x(lst, x):\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return result\n\n\nprint(find_x([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5))\nprint(find_x([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9))\nprint(find_x([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1))\nprint(find_x([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0))\nprint(find_x([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10", "prompt": "\n/*\n\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n*/\n"}
{"task_id": "Rust/88", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    \n*/\n"}
{"task_id": "Rust/89", "generation": "\nfunction encrypt(str) {\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let encrypted = \"\";\n    for (let i = 0; i < str.length; i++) {\n        let index = alphabet.indexOf(str[i]);\n        if (index !== -1) {\n            encrypted += alphabet[index + 2 * 2];\n        } else {\n            encrypted += str[i];\n        }\n    }\n    return encrypted;\n}\n\nconsole.log(encrypt(\"hello\"));\nconsole.log(encrypt(\"abc\"));\nconsole.log(encrypt(\"xyz\"));\nconsole.log(encrypt(\"123\"));\nconsole.log(encrypt(\"\"));", "prompt": "\n/*\nCreate a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    \n*/\n"}
{"task_id": "Rust/90", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n*/\n"}
{"task_id": "Rust/91", "generation": "\nfunction boredom(str) {\n    let count = 0;\n    let arr = str.split('.');\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i].startsWith('I')) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(boredom(\"I am a sentence. I am another sentence. I am a third sentence.\"));", "prompt": "\n/*\n\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n*/\n"}
{"task_id": "Rust/92", "generation": "\nfunction sumEqualsOne(a, b, c) {\n    if (typeof a !== 'number' || typeof b !== 'number' || typeof c !== 'number') {\n        return false;\n    }\n    if (a + b === c || a + c === b || b + c === a) {\n        return true;\n    }\n    return false;\n}\n\nconsole.log(sumEqualsOne(1, 2, 3)); // true\nconsole.log(sumEqualsOne(1, 2, 4)); // false\nconsole.log(sumEqualsOne(1, 2, 3.1)); // false\nconsole.log(sumEqualsOne(1, 2, '3')); // false\nconsole.log(sumEqualsOne(1, 2, '3.1')); // false\nconsole.log(sumEqualsOne(1, 2, '3', '4')); // false\nconsole.log(sumEqualsOne(1, 2, '3', 4)); // false\nconsole.log(sumEqualsOne(1, 2, 3, 4)); // false\nconsole.log(sum", "prompt": "\n/*\n\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n*/\n"}
{"task_id": "Rust/93", "generation": "\nfunction encode(message) {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        if (message[i] === message[i].toUpperCase()) {\n            newMessage += message[i].toLowerCase();\n        } else {\n            newMessage += message[i].toUpperCase();\n        }\n    }\n    return newMessage;\n}\n\nfunction decode(message) {\n    let newMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n        if (message[i] === message[i].toUpperCase()) {\n            newMessage += message[i].toLowerCase();\n        } else {\n            newMessage += message[i].toUpperCase();\n        }\n    }\n    return newMessage;\n}\n\nconsole.log(encode(\"Hello World!\"));\nconsole.log(decode(\"hELLO wORLD!\"));", "prompt": "\n/*\n\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n*/\n"}
{"task_id": "Rust/94", "generation": "\nfunction largestPrimeSum(nums) {\n    let max = 0;\n    let sum = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (isPrime(nums[i])) {\n            if (nums[i] > max) {\n                max = nums[i];\n            }\n        }\n    }\n    while (max > 0) {\n        sum += max % 10;\n        max = Math.floor(max / 10);\n    }\n    return sum;\n}\n\nfunction isPrime(num) {\n    if (num < 2) {\n        return false;\n    }\n    for (let i = 2; i < num; i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(largestPrimeSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));", "prompt": "\n/*\nYou are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n    \n*/\n"}
{"task_id": "Rust/95", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \n*/\n"}
{"task_id": "Rust/96", "generation": "\nfunction primeNumbers(n) {\n    let arr = [];\n    for (let i = 2; i < n; i++) {\n        if (isPrime(i)) {\n            arr.push(i);\n        }\n    }\n    return arr;\n}\n\nfunction isPrime(n) {\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconsole.log(primeNumbers(10));", "prompt": "\n/*\nImplement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \n*/\n"}
{"task_id": "Rust/97", "generation": "\nfunction unitDigitProduct(a, b) {\n    let aUnit = a % 10;\n    let bUnit = b % 10;\n    return aUnit * bUnit;\n}\n\nconsole.log(unitDigitProduct(12, 13));", "prompt": "\n/*\nComplete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    \n*/\n"}
{"task_id": "Rust/98", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n*/\n"}
{"task_id": "Rust/99", "generation": "\nfunction closest_integer(num) {\n    let numArr = num.split('.');\n    let numInt = parseInt(numArr[0]);\n    let numDec = numArr[1];\n    let numDecInt = parseInt(numDec);\n    let numDecIntRounded = Math.round(numDecInt);\n    let numDecRounded = numDecIntRounded.toString();\n    let numDecRoundedInt = parseInt(numDecRounded);\n    let numDecRoundedIntRounded = Math.round(numDecRoundedInt);\n    let numDecRoundedIntRoundedStr = numDecRoundedIntRounded.toString();\n    let numDecRoundedIntRoundedInt = parseInt(numDecRoundedIntRoundedStr);\n    let numDecRoundedIntRoundedIntRounded = Math.round(numDecRoundedIntRoundedInt);\n    let numDecRoundedIntRoundedIntRoundedStr = numDecRoundedIntRoundedIntRounded.toString();\n    let numDecRoundedIntRoundedIntRoundedInt = parseInt(numDecRoundedIntRoundedIntRoundedStr);\n", "prompt": "\n/*\n\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \n*/\n"}
{"task_id": "Rust/100", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \n*/\n"}
{"task_id": "Rust/101", "generation": "\nfunction splitStr(str) {\n    return str.split(/[, ]+/);\n}\n\nconsole.log(splitStr(\"a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\"));", "prompt": "\n/*\n\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n*/\n"}
{"task_id": "Rust/102", "generation": "\nfunction getBiggestEvenNumber(x, y) {\n    if (x % 2 === 0 && y % 2 === 0) {\n        if (x > y) {\n            return x;\n        } else {\n            return y;\n        }\n    } else if (x % 2 === 0 && y % 2 !== 0) {\n        return x;\n    } else if (x % 2 !== 0 && y % 2 === 0) {\n        return y;\n    } else {\n        return -1;\n    }\n}\n\nconsole.log(getBiggestEvenNumber(1, 2));\nconsole.log(getBiggestEvenNumber(2, 1));\nconsole.log(getBiggestEvenNumber(2, 2));\nconsole.log(getBiggestEvenNumber(1, 3));\nconsole.log(getBiggestEvenNumber(3, 1));\nconsole.log(getBiggestEvenNumber(3, 3));\nconsole.log(getBiggestEvenNumber(4, 5));\nconsole.log(getBiggestEvenNumber", "prompt": "\n/*\nThis function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \n*/\n"}
{"task_id": "Rust/103", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\nYou are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    \n*/\n"}
{"task_id": "Rust/104", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\nGiven a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n*/\n"}
{"task_id": "Rust/105", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    \n*/\n"}
{"task_id": "Rust/106", "generation": "\nfunction f(n) {\n    let result = [];\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(factorial(i));\n        } else {\n            result.push(sum(i));\n        }\n    }\n    return result;\n}\n\nfunction factorial(n) {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\nfunction sum(n) {\n    let result = 0;\n    for (let i = 1; i <= n; i++) {\n        result += i;\n    }\n    return result;\n}\n\nconsole.log(f(5)); // [1, 1, 6, 24, 120]", "prompt": "\n/*\n Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    \n*/\n"}
{"task_id": "Rust/107", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \n*/\n"}
{"task_id": "Rust/108", "generation": "\nfunction count_nums(arr) {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let sum = 0;\n        let num = arr[i];\n        while (num > 0) {\n            sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(count_nums([123, 456, -789])); // 2\nconsole.log(count_nums([123, 456, 789])); // 3\nconsole.log(count_nums([-123, -456, -789])); // 3\nconsole.log(count_nums([123, 456, 789, -123, -456, -789])); // 3", "prompt": "\n/*\n\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \n*/\n"}
{"task_id": "Rust/109", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\nWe have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n    \n*/\n"}
{"task_id": "Rust/110", "generation": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nbool isEven(int num) {\n    return num % 2 == 0;\n}\n\nbool canMakeEven(vector<int> lst1, vector<int> lst2) {\n    int count = 0;\n    for (int i = 0; i < lst1.size(); i++) {\n        if (!isEven(lst1[i])) {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return true;\n    }\n    for (int i = 0; i < lst2.size(); i++) {\n        if (!isEven(lst2[i])) {\n            count--;\n        }\n    }\n    if (count >= 0) {\n        return true;\n    }\n    return false;\n}\n\nint main() {\n    vector<int> lst1 = {1, 2, 3, 4, 5};\n    vector<int> lst2 = {6, ", "prompt": "\n/*\nIn this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n\n    It is assumed that the input lists will be non-empty.\n    \n*/\n"}
{"task_id": "Rust/111", "generation": "\nfunction mostRepetitive(str) {\n    let obj = {};\n    let max = 0;\n    let maxKey = \"\";\n    let arr = str.split(\" \");\n    for (let i = 0; i < arr.length; i++) {\n        if (obj[arr[i]] === undefined) {\n            obj[arr[i]] = 1;\n        } else {\n            obj[arr[i]]++;\n        }\n    }\n    for (let key in obj) {\n        if (obj[key] > max) {\n            max = obj[key];\n            maxKey = key;\n        }\n    }\n    return maxKey;\n}\n\nconsole.log(mostRepetitive(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\"));\nconsole.log(mostRepetitive(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\"));\nconsole.log(mostRepetitive(\"a b c d e f g h i j k l m n", "prompt": "\n/*\nGiven a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n*/\n"}
{"task_id": "Rust/112", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\nTask\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    \n*/\n"}
{"task_id": "Rust/113", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\nGiven a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n    \n*/\n"}
{"task_id": "Rust/114", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \n*/\n"}
{"task_id": "Rust/115", "generation": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n    vector<vector<int>> grid(n, vector<int>(m));\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            cin >> grid[i][j];\n        }\n    }\n\n    int bucketSize = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (grid[i][j] > 0) {\n                bucketSize = max(bucketSize, grid[i][j]);\n            }\n        }\n    }\n\n    int numBuckets = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (grid[i][j] >", "prompt": "\n/*\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n*/\n"}
{"task_id": "Rust/116", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    \n*/\n"}
{"task_id": "Rust/117", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\nGiven a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    \n*/\n"}
{"task_id": "Rust/118", "generation": "\nfunction findVowel(str) {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    let vowel = '';\n    let consonant = '';\n    let consonant2 = '';\n    let index = 0;\n    let index2 = 0;\n    let index3 = 0;\n    let index4 = 0;\n    let index5 = 0;\n    let index6 = 0;\n    let index7 = 0;\n    let index8 = 0;\n    let index9 = 0;\n    let index10 = 0;\n    let index11 = 0;\n    let index12 = 0;\n    let index13 = 0;\n    let index14 = 0", "prompt": "\n/*\nYou are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n    \n*/\n"}
{"task_id": "Rust/119", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n    \n*/\n"}
{"task_id": "Rust/120", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \n*/\n"}
{"task_id": "Rust/121", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\nGiven a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n*/\n"}
{"task_id": "Rust/122", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \n*/\n"}
{"task_id": "Rust/123", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n    \n*/\n"}
{"task_id": "Rust/124", "generation": "\nfunction isValidDate(date) {\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n    if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n        if (day > 29) {\n            return false;\n        }\n    } else if (month === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30) {\n            return false;\n        }\n    }\n    if (year < 1000 || year > 9999) {\n        return false;\n    }\n    return true;\n}\n\nconsole.log(isValidDate('12-31-", "prompt": "\n/*\nYou have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n    \n*/\n"}
{"task_id": "Rust/125", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    \n*/\n"}
{"task_id": "Rust/126", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    \n*/\n"}
{"task_id": "Rust/127", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\nYou are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n    \n*/\n"}
{"task_id": "Rust/128", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n    \n*/\n"}
{"task_id": "Rust/129", "generation": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\n#include <unordered_map>\n#include <unordered_set>\n#include <queue>\n#include <stack>\n#include <map>\n#include <set>\n#include <math.h>\n#include <limits.h>\n#include <list>\n#include <sstream>\n#include <iomanip>\n#include <bitset>\n#include <cstring>\n#include <cstdio>\n#include <cstdlib>\n#include <cmath>\n#include <cctype>\n#include <climits>\n#include <ctime>\n#include <functional>\n#include <numeric>\n#include <utility>\n#include <fstream>\n#include <complex>\n#include <iterator>\n#include <cassert>\n#include <cstddef>\n#include <cstdarg>\n#include <csetjmp>\n#include <csignal>\n#include <cstdlib>\n#include <c", "prompt": "\n/*\n\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n    \n*/\n"}
{"task_id": "Rust/130", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    \n*/\n"}
{"task_id": "Rust/131", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\nGiven a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    \n*/\n"}
{"task_id": "Rust/132", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    \n*/\n"}
{"task_id": "Rust/133", "generation": "\n#include <stdio.h>\n#include <stdlib.h>\n\nint sum_of_squares_and_cubes(int *list, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 3 == 0) {\n            list[i] *= list[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            list[i] *= list[i] * list[i];\n        }\n        sum += list[i];\n    }\n    return sum;\n}\n\nint main() {\n    int list[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    int size = sizeof(list) / sizeof(list[0]);\n    int sum = sum_of_squares_and_cubes(list, size);\n    printf(\"Sum of squares and cubes: %d\\n\", sum);\n   ", "prompt": "\n/*\n\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n*/\n"}
{"task_id": "Rust/134", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n    \n*/\n"}
{"task_id": "Rust/135", "generation": "\nfunction largestIndex(arr) {\n    let largestIndex = -1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > arr[i - 1] && arr[i] > arr[i + 1]) {\n            largestIndex = i;\n        }\n    }\n    return largestIndex;\n}\n\nconsole.log(largestIndex([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));", "prompt": "\n/*\nCreate a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n    \n*/\n"}
{"task_id": "Rust/136", "generation": "\n\ndef largest_negative_smallest_positive(numbers):\n    if len(numbers) == 0:\n        return None, None\n    if len(numbers) == 1:\n        return numbers[0], None\n    if len(numbers) == 2:\n        if numbers[0] < 0 and numbers[1] > 0:\n            return numbers[0], numbers[1]\n        elif numbers[0] > 0 and numbers[1] < 0:\n            return numbers[1], numbers[0]\n        else:\n            return None, None\n    else:\n        negatives = []\n        positives = []\n        for number in numbers:\n            if number < 0:\n                negatives.append(number)\n            elif number > 0:\n                positives.append(number)\n        if len(negatives) == 0:\n            return None, positives[0]\n        elif len(positives) == 0:\n            return negatives[0], None\n        else:\n            return max(negatives), min(positives", "prompt": "\n/*\n\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n    \n*/\n"}
{"task_id": "Rust/137", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n    \n*/\n"}
{"task_id": "Rust/138", "generation": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nbool isSumOfFourEven(int n)\n{\n    vector<int> v;\n    for (int i = 2; i <= n; i += 2)\n        v.push_back(i);\n\n    sort(v.begin(), v.end());\n\n    for (int i = 0; i < v.size(); i++)\n    {\n        int sum = v[i];\n        for (int j = i + 1; j < v.size(); j++)\n        {\n            sum += v[j];\n            if (sum == n)\n                return true;\n        }\n    }\n\n    return false;\n}\n\nint main()\n{\n    int n;\n    cin >> n;\n\n    if (isSumOfFourEven(n))\n        cout << \"YES\";\n    else\n        cout << \"NO\";\n\n    return 0;\n}", "prompt": "\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    \n*/\n"}
{"task_id": "Rust/139", "generation": "\nfunction brazilianFactorial(n) {\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\nconsole.log(brazilianFactorial(5));", "prompt": "\n/*\nThe Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \n*/\n"}
{"task_id": "Rust/140", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n*/\n"}
{"task_id": "Rust/141", "generation": "\nfunction isValidFileName(fileName) {\n    let regex = /^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$/;\n    return regex.test(fileName);\n}\n\nconsole.log(isValidFileName(\"abc.txt\"));\nconsole.log(isValidFileName(\"abc.txt.txt\"));\nconsole.log(isValidFileName(\"abc.txt.txt.txt\"));\nconsole.log(isValidFileName(\"abc.txt.txt.txt.txt\"));\nconsole.log(isValidFileName(\"abc.txt.txt.txt.txt.txt\"));\nconsole.log(isValidFileName(\"abc.txt.txt.txt.txt.txt.txt\"));\nconsole.log(isValidFileName(\"abc.txt.txt.txt.txt.txt.txt.txt\"));\nconsole.log(isValidFileName(\"abc.txt.txt.txt.txt.txt.txt.txt.txt\"));\nconsole.log(isValidFileName(\"abc.txt.txt.txt.txt.txt.txt.txt.txt.txt\"));\nconsole.log(isValidFileName(\"abc.txt.txt.", "prompt": "\n/*\nCreate a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    \n*/\n"}
{"task_id": "Rust/142", "generation": "\n#include <stdio.h>\n#include <stdlib.h>\n\nint sum_of_squares_and_cubes(int *list, int size) {\n    int sum = 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 3 == 0) {\n            list[i] *= list[i];\n        }\n        if (i % 4 == 0 && i % 3 != 0) {\n            list[i] *= list[i] * list[i];\n        }\n        sum += list[i];\n    }\n    return sum;\n}\n\nint main() {\n    int list[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    int size = sizeof(list) / sizeof(list[0]);\n    int sum = sum_of_squares_and_cubes(list, size);\n    printf(\"Sum of squares and cubes: %d\\n\", sum);\n   ", "prompt": "\n/*\n\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n*/\n"}
{"task_id": "Rust/143", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \n*/\n"}
{"task_id": "Rust/144", "generation": "\nfunction simplify(x, n) {\n    let xNum = x.split('/')[0];\n    let xDen = x.split('/')[1];\n    let nNum = n.split('/')[0];\n    let nDen = n.split('/')[1];\n    let xNumInt = parseInt(xNum);\n    let xDenInt = parseInt(xDen);\n    let nNumInt = parseInt(nNum);\n    let nDenInt = parseInt(nDen);\n    let xNumIntN = xNumInt * nNumInt;\n    let xDenIntN = xDenInt * nDenInt;\n    let xNumIntNInt = parseInt(xNumIntN / xDenIntN);\n    if (xNumIntNInt === xNumIntN / xDenIntN) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(simplify('1/2', '1/2'));\nconsole.log(simplify('1/2', '1/3'));\nconsole.log(simplify('1/", "prompt": "\n/*\nYour task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n    \n*/\n"}
{"task_id": "Rust/145", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n    \n*/\n"}
{"task_id": "Rust/146", "generation": "\nfunction oddNumbers(arr) {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num = arr[i];\n        let firstDigit = num % 10;\n        let lastDigit = Math.floor(num / 10) % 10;\n        if (firstDigit % 2 !== 0 && lastDigit % 2 !== 0 && num > 10) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(oddNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));", "prompt": "\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    \n*/\n"}
{"task_id": "Rust/147", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \n*/\n"}
{"task_id": "Rust/148", "generation": "\n\ndef planets_between(planet1, planet2):\n    if planet1 == \"Mercury\" or planet1 == \"Venus\" or planet1 == \"Earth\" or planet1 == \"Mars\" or planet1 == \"Jupiter\" or planet1 == \"Saturn\" or planet1 == \"Uranus\" or planet1 == \"Neptune\":\n        if planet2 == \"Mercury\" or planet2 == \"Venus\" or planet2 == \"Earth\" or planet2 == \"Mars\" or planet2 == \"Jupiter\" or planet2 == \"Saturn\" or planet2 == \"Uranus\" or planet2 == \"Neptune\":\n            if planet1 == \"Mercury\" and planet2 == \"Venus\":\n                return (\"Mercury\", \"Venus\")\n            elif planet1 == \"Venus\" and planet2 == \"Earth\":\n                return (\"Venus\", \"Earth\")\n            elif planet1 == \"Earth\" and planet2 == \"Mars\":\n                return (\"Earth\", \"Mars\")\n            elif planet1 == \"M", "prompt": "\n/*\n\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    \n*/\n"}
{"task_id": "Rust/149", "generation": "\nfunction sortByLength(list) {\n    let sortedList = list.filter(word => word.length % 2 === 0).sort((a, b) => a.length - b.length);\n    return sortedList;\n}\n\nconsole.log(sortByLength([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]));\n\n// Expected output: [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]", "prompt": "\n/*\nWrite a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    \n*/\n"}
{"task_id": "Rust/150", "generation": "\n#include <stdio.h>\n\nint main()\n{\n    int n, x, y;\n    printf(\"Enter a number: \");\n    scanf(\"%d\", &n);\n    if (n % 2 == 0)\n    {\n        x = 1;\n        y = 0;\n    }\n    else\n    {\n        x = 0;\n        y = 1;\n    }\n    printf(\"x = %d, y = %d\", x, y);\n    return 0;\n}", "prompt": "\n/*\nA simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \n*/\n"}
{"task_id": "Rust/151", "generation": "\nfunction sumOfSquares(numbers) {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] % 2 !== 0 && numbers[i] > 0) {\n            sum += Math.pow(numbers[i], 2);\n        }\n    }\n    return sum;\n}\n\nconsole.log(sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // 285\nconsole.log(sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])); // 1050\nconsole.log(sumOfSquares([1, 2, 3, 4, 5, 6, ", "prompt": "\n/*\n\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n   \n    If the input list is empty, return 0.\n    \n*/\n"}
{"task_id": "Rust/152", "generation": "\nfunction scoreGuess(scores, guesses) {\n    let result = [];\n    for (let i = 0; i < scores.length; i++) {\n        result.push(Math.abs(scores[i] - guesses[i]));\n    }\n    return result;\n}\n\nconsole.log(scoreGuess([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(scoreGuess([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(scoreGuess([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(scoreGuess([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\nconsole.log(scoreGuess([1, 2, 3, 4, 5], [1, 2, 3, 4", "prompt": "\n/*\nI think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n*/\n"}
{"task_id": "Rust/153", "generation": "\nfunction strongestExtension(className, extensions) {\n    let max = 0;\n    let maxStr = \"\";\n    for (let i = 0; i < extensions.length; i++) {\n        let str = extensions[i];\n        let cap = 0;\n        let sm = 0;\n        for (let j = 0; j < str.length; j++) {\n            if (str[j] === str[j].toUpperCase()) {\n                cap++;\n            } else {\n                sm++;\n            }\n        }\n        let strength = cap - sm;\n        if (strength > max) {\n            max = strength;\n            maxStr = str;\n        }\n    }\n    return className + \".\" + maxStr;\n}\n\nconsole.log(strongestExtension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]));", "prompt": "\n/*\nYou will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    \n*/\n"}
{"task_id": "Rust/154", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\nYou are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    \n*/\n"}
{"task_id": "Rust/155", "generation": "\nfunction evenOdd(num) {\n    let even = 0;\n    let odd = 0;\n    while (num > 0) {\n        let digit = num % 10;\n        if (digit % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num = Math.floor(num / 10);\n    }\n    return [even, odd];\n}\n\nconsole.log(evenOdd(123456789));", "prompt": "\n/*\nGiven an integer. return a tuple that has the number of even and odd digits respectively.\n    \n*/\n"}
{"task_id": "Rust/156", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \n*/\n"}
{"task_id": "Rust/157", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    \n*/\n"}
{"task_id": "Rust/158", "generation": "\nfunction maxUniqueChars(arr) {\n    let max = 0;\n    let maxWord = '';\n    for (let i = 0; i < arr.length; i++) {\n        let word = arr[i];\n        let uniqueChars = new Set(word);\n        if (uniqueChars.size > max) {\n            max = uniqueChars.size;\n            maxWord = word;\n        }\n    }\n    return maxWord;\n}\n\nconsole.log(maxUniqueChars(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']));", "prompt": "\n/*\nWrite a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n    \n*/\n"}
{"task_id": "Rust/159", "generation": "\nfunction rabbit(number, need, remaining) {\n    let eaten = number + remaining;\n    let left = remaining - need;\n    if (left < 0) {\n        eaten += left;\n        left = 0;\n    }\n    return [eaten, left];\n}\n\nconsole.log(rabbit(10, 10, 10)); // [20, 0]\nconsole.log(rabbit(10, 10, 11)); // [21, -1]\nconsole.log(rabbit(10, 10, 9)); // [19, 1]\nconsole.log(rabbit(10, 10, 8)); // [18, 2]\nconsole.log(rabbit(10, 10, 7)); // [17, 3]\nconsole.log(rabbit(10, 10, 6)); // [16, 4]\nconsole.log(rabbit(10, 10, 5)); // [15, 5]\nconsole.log", "prompt": "\n/*\n\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \n*/\n"}
{"task_id": "Rust/160", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \n*/\n"}
{"task_id": "Rust/161", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\nYou are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    \n*/\n"}
{"task_id": "Rust/162", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \n*/\n"}
{"task_id": "Rust/163", "generation": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "prompt": "\n/*\n\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n    \n*/\n"}
